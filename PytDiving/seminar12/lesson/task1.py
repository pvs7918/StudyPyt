# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å-—Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –ø—Ä–∏
# –≤—ã–∑–æ–≤–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ k –∑–Ω–∞—á–µ–Ω–∏–π.
# üìå –ü–∞—Ä–∞–º–µ—Ç—Ä k –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–Ω–µ–µ –≤—ã–∑—ã–≤–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏
# –∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤.
from collections import defaultdict


class Factorial:

    def __init__(self):
        self.results = defaultdict(list)
        self.termkresults = []
        self.kresults = []

    def __call__(self, number):
        result = 1
        for i in range(1, number + 1):
            result *= i
        self.results[number].append(result)
        self.termkresults.append(result)
        if number < len(self.termkresults):
            for i in range(len(self.termkresults)) - number, len(self.termkresults):
                self.kresults.append(self.termkresults[i])
        else:
            for i in range(0, len(self.termkresults)):
                self.kresults.append(self.termkresults[i])

    def __str__(self):
        txt = '\n'.join((f'{k}: {v}' for k, v in self.results.items())) + "\n" + '\n'.join((f' {v}' for v in self.kresults))
        return txt


factor = Factorial()

factor(1)
factor(10)
factor(6)

print(factor)