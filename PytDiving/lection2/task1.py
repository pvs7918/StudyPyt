# str = input('Введите строку:')
#
# print (type(str), id(str), hash(str))   # вывод типа объекта, его адреса в памяти и хэша

#
# a: int = 42   # аннотация типа, предопределение типа
# a: int | float  = 42 # a может быть целым или вещественным числом
#
# def func1(data: list[int, float]) -> float: # data это список с элементами типов int или float. Возврат значения типа float
#     pass
#
# print (str.__doc__) # __doc__ - это метод, который выводит описание метода

# print(dir(object))      #dir - попытается вернуть список допустимых аттрибутов для объекта
# help(object)    # показать документацию по объекту
#
# print(dir('Hello world'))  #покажет список атрибутов и методов, которыми можно пользоваться по отношению к объекту
#
# help(str)   #покажет документацию по объекту str - строка текста. описание методов и аттрибутов

# интерактивная справка
# help()      # команда означает перейти в режим получения справки по различным командам
# # keywords    # покажет все ключевые слова
# # symbols     # покавсе используемые знаки: >, <, ==, != и т.д.
#
# print("Hello world!".upper())   #привести к верхнему регистру
# print("hello world!".title())   #сделать первую заглавную букву, а остальные маленькими
# print("Hello world!".count('l'))   # подсчитать количество символов 'l' в строке


# Целые числа

# Разберём на примерах.
# ✔ int(x, base=10) — возвращает целочисленный
# объект, созданный из числа или строки x ,
# или возвращает значение 0, если аргументы
# не заданы. base — основание системы счисления,
# от 2 до 36.
# ✔ bin(x) — преобразует целое число в двоичную
# строку с префиксом «0b».
# ✔ oct(x) — преобразует целое число в
# восьмеричную строку с префиксом «0o».
# ✔ hex(x)— преобразует целое число в строчную
# шестнадцатеричную строку с префиксом «0x».

# import sys
#
# STEP = 2**16
# num = 1
# for _ in range(40):
#         print(sys.getsizeof(num), num)
#         num *= STEP
#
# num = 7_456_456_234     # _ нужен для визуального разделения тысяч
# print(num)              # при печати их нет
#
# age= 20
# print 'Целевой возраст' str(age + 10)  #str() в данном случае оборачивание


# s1 = 'abc'
# print(s1.__sizeof__())  # размер строки в байтах

# str.isalnum() — возвращает True, если все символы в строке буквенно-цифровые. Символ является
# буквенно-цифровым, если одно из следующих значений возвращает True: c.isalpha(), c.isdecimal(),
# c.isdigit()или c.isnumeric().
# ✔ str.isalpha() — возвращает True, если все символы в строке являются буквенными. Алфавитные
# символы — это символы, определенные в базе данных символов Юникода как «буква».
# ✔ str.isdecimal() — возвращает True, если все символы в строке являются десятичными символами
# ✔ str.isdigit() — возвращает True, если все символы в строке являются цифрами. Цифры включают
# десятичные символы и цифры, требующие специальной обработки, например цифры надстрочного
# индекса совместимости.
# ✔ str.isnumeric() — возвращает True, если все символы в строке являются числовыми символами.
# Числовые символы включают цифровые символы и все символы, которые имеют свойство
# числового значения Unicode.
# ✔ str.isascii() — возвращает True, если строка пуста или все символы в строке ASCII.
# ✔ str.islower() — возвращает True, если все символы в строке в нижнем регистре.
# ✔ str.istitle() — возвращает True, если строка является строкой с заглавным регистром
# и содержит хотя бы один символ.
# ✔ str.isupper() — возвращает True, если все символы в строке в верхнем регистре.
# ✔ str.isprintable() — возвращает True, если все символы в строке доступны для печати или строка пуста.
# Непечатаемые символы — это символы, определенные в базе данных символов Unicode как «Другие»
# или «Разделители», за исключением пробела ASCII (0x20), который считается печатаемым.
# ✔ str.isspace() — возвращает True, если в строке есть только пробельные символы.


# Математические модули
# Погружение в Python | Простые типы данных
# В Python есть несколько модулей в стандартной
# библиотеке, которые облегчают математические
# расчёты. Для доступа к ним необходимо выполнить
# импорт в начале файла.
# import math
# import decimal
# import fractions


# import Decimal

# Decimal - для точных расчетов вещественных чисел без потери точности.
# у float точность ограничена
# num = decimal.Decimal(object)
#
# Получаем вещественное число
# с точностью 28 знаков (до и после запятой).
# 💡 decimal.getcontext().prec = dec
# Задаём точность в dec знаков
# для будущих операций.

# import Fraction
# для работы с дробями
# f1 = fractions.Fraction(1, 3)
# print(f1)
# f2 = fractions.Fraction(3, 5)
# print(f2)
# print(f1 * f2)

# Комплексные числа
# Погружение в Python | Простые типы данных
# complex([real[, imag]]) — комплексное число
# из действительной real и мнимой imag частей.
# a = complex(2, 3)
# b = complex('2+3j')
# print(a, b, a == b, sep='\n')


# Математические функции «из коробки»
# Погружение в Python | Простые типы данных
# ✔ abs(x) — возвращает абсолютное значение числа x,
# число по модулю.
# ✔ divmod(a, b) — функция принимает два числа
# в качестве аргументов и возвращает пару чисел —
# частное и остаток от целочисленного деления.
# Аналогично вычислению a // b и a % b.
# ✔ pow(base, exp[, mod]) — при передаче 2-х аргументов
# возводит base в степень exp. При передаче 3-х
# аргументов, результат возведения в степень делится
# по модулю на значение mod.
# ✔ round(number[, ndigits]) — округляет число
# number до ndigits цифр после запятой. Если второй
# аргумент не передать, округляет до ближайшего целого.