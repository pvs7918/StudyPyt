# üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3-
# —è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
# üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
# üìå –õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.
import logging
from datetime import datetime


def my_parse_date(src_text):
    # —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "3-—è —Å—Ä–µ–¥–∞ –º–∞—è" —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞

    dict_week_day = {'–ø–æ–Ω': ('Monday', 1), '–≤—Ç–æ': ('Tuesday', 2), '—Å—Ä–µ': ('Wednesday', 3),
                     '—á–µ—Ç': ('Thursday', 4), '–ø—è—Ç': ('Friday', 5), '—Å—É–±': ('Saturday', 6),
                     '–≤–æ—Å': ('Sunday', 7)}

    dict_for_month = {
        '—è–Ω–≤': 'January', '—Ñ–µ–≤': 'February', '–º–∞—Ä': 'March', '–∞–ø—Ä': 'April',
        '–º–∞—è': 'May', '–∏—é–Ω': 'June', '–∏—é–ª': 'July', '–∞–≤–≥': 'August',
        '—Å–µ–Ω': 'September', '–æ–∫—Ç': 'October', '–Ω–æ—è': 'November', '–¥–µ–∫': 'December'
    }

    parse_date = src_text.split()
    # –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
    str_week_num = ''
    for ch in parse_date[0]:
        if ch.isdigit():
            str_week_num += ch
    if str_week_num != '':
        parse_week_num = int(str_week_num)
    else:
        logging.error(f'–í –¥–∞—Ç–µ "{src_text}" –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ {parse_date[0]} –∑–∞–¥–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ')
        return None
    # –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    if parse_date[1][:3] in dict_week_day:
        parse_week_day_name, parse_week_day_num = dict_week_day[parse_date[1][:3]]
    else:
        logging.error(f'–í –¥–∞—Ç–µ "{src_text}" –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ {parse_date[1]} –∑–∞–¥–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ')
        return None
    # –º–µ—Å—è—Ü
    if parse_date[2][:3] in dict_for_month:
        parse_month = dict_for_month[parse_date[2][:3]]
    else:
        logging.error(f'–í –¥–∞—Ç–µ "{src_text}" –º–µ—Å—è—Ü {parse_date[2]} –∑–∞–¥–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ')
        return None
    # –≥–æ–¥
    parse_year = datetime.now().year

    # ----–≤—ã—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    # –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
    cur_text = f'1 {parse_month} {parse_year}'
    week_day_for_1day_month = datetime.weekday(datetime.strptime(cur_text, '%d %B %Y')) + 1
    # –∫–æ—Ä—Ç–µ–∂ d1 —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è 1 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞
    d1 = (1, week_day_for_1day_month)
    # –∫–æ—Ä—Ç–µ–∂ d2 —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º–æ–π –¥–∞—Ç—ã
    d2 = (parse_week_num, parse_week_day_num)

    if d2[1] >= d1[1]:
        parse_day_of_month = (d2[0] - d1[0]) * 7 + (d2[1] - d1[1]) + 1
    else:
        parse_day_of_month = (d2[0] - d1[0] + 1) * 7 + (d2[1] - d1[1]) + 1

    cur_text = f'{parse_day_of_month} {parse_month} {parse_year}'
    try:
        cur_date = datetime.strptime(cur_text, '%d %B %Y')
    except Exception as e:
        logging.error(f'–í –¥–∞—Ç–µ "{src_text}" –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É: {e}')
        return None

    return cur_date


if __name__ == "__main__":

    # –≤–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(filename='task4.log', filemode='a',
                        encoding='utf-8', level=logging.INFO)

    date_text_list = ["3-—è –ø—è—Ç–Ω–∏—Ü–∞ –∏—é–ª—è", "1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è", "3-—è —Å—Ä–µ–¥–∞ –º–∞—è", "6-–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –¥–µ–∫–∞–±—Ä—è"]
    for src_text in date_text_list:
        cur_date = my_parse_date(src_text)
        if cur_date == None:
            print(f'–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞—Ç—ã:{src_text}, –≤—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: {cur_date}.')
        else:
            print(f'–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞—Ç—ã:{src_text}, –≤—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: {cur_date}, –∫–æ–Ω—Ç—Ä–æ–ª—å(–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏):'
              f'{datetime.weekday(cur_date) + 1}')
