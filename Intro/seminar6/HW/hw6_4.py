# 4. * Функция принимает в качестве аргументов строки в формате «Имя Фамилия»,
# возвращает словарь, ключи — первые буквы фамилий, значения — словари,
# реализованные по схеме предыдущего задания.
# in
# "Иван Сергеев", "Инна Серова", "Петр Алексеев",
# "Илья Иванов", "Анна Савельева", "Юнона Ветрякова",
# "Борис Аркадьев", "Антон Серов", "Павел Анисимов"
#
# out
#
# {'С': {'А': ['Анна Савельева', 'Антон Серов'], 'И': ['Иван Сергеев', 'Инна Серова']}, 'А': {'Б': ['Борис Аркадьев'], 'П': ['Павел Анисимов', 'Петр Алексеев']}, 'И': {'И': ['Илья Иванов']}, 'В': {'Ю': ['Юнона Ветрякова']}}
#

def CreateDifficultDict(src_ls):
    # создаем пустой словарь
    res_dict = {}
    for nm in src_ls:
        # разбиваем Фамилию и Имя на список из двух значений
        ls_fio = nm.split()
        #фамилия
        surname = ls_fio[1]
        # считываем текущее значение списка элемента словаря,
        # если нет такого ключа в словаре, то создаем пустой список
        if surname[0] in res_dict.keys():
            tmp_ls = res_dict[surname[0]]
        else:
            tmp_ls = []
        # добавляем имя в список и заносим обновленный список обратно в словарь
        tmp_ls.append(nm)
        res_dict[surname[0]] = tmp_ls
    return res_dict


ls = ["Иван Сергеев", "Инна Серова", "Петр Алексеев",
"Илья Иванов", "Анна Савельева", "Юнона Ветрякова",
"Борис Аркадьев", "Антон Серов", "Павел Анисимов"]

my_dict = CreateDifficultDict(ls)
print(my_dict)